#************************************************#
#          DISEÑO DE PROCESADORES  14/15:        #
#                                                #
#   Extension de calculadora junto con monitor   #
#************************************************#

#**************************#
#   CONSTANTES INICIALES   #
#**************************#
#asignamos unos opcodes a la suma, resta y multiplicacion
#para compararlos con el operando de entrada

li $5, 0    #operando asignado a la suma (00)       
li $6, 1    #operando asignado a la resta (01)
li $7, 2    #operando asignado a la multiplicacion (10)
li $8, 3    #operando asignado a la division (11)

li $9, 10   # Comprobar nº de 2 digitos y pintar un operador
li $11, 0   # Contador de Posicion
li $12, 14  # Pintar IGUAL

# $10: Registro a pintar
# $13: Pintar punto o blanco
# $14: Dato Caracter 1
# $15: Dato Caracter 2


#*****************#
#   CALCULADORA   #
#*****************#

# 00: SUMA  (HARDWARE)
# 01: RESTA     (HARDWARE)
# 10: MULTIPLICACION    (SOFTWARE)
# 11: DIVISION  (SOFTWARE)

main:


    lesr $1, @0     #cargamos en registro el primer valor de la e/s
    lesr $2, @1     #cargamos en registro el segundo valor de la e/s
    lesr $3, @2     #cargamos en registro el operador desde la e/s

    sub $4, $3, $5  #comparamos en busca de la suma
    bnez sumar
    
    sub $4, $3, $6  #comparamos en busca de la resta
    bnez restar
    
    sub $4, $3, $7  #comparamos en busca de la multiplicacion
    bnez multiplicar

    sub $4, $3, $8  #comparamos en busca de la division
    bnez dividir 
    
    j main


#***************#
#   00 - SUMA   #
#***************#

sumar:

    add $4, $1, $2
    j mostrar

#****************#
#   01 - RESTA   #
#****************#

restar:

    sub $4, $1, $2
    j mostrar


#***************************#
#   10 - MULTIPLICACION     #
#***************************#

multiplicar:

    move $4, $0
    add $5, $1, $0  # si $1 == 0, no hacer bucle1
    bnez mostrar     

bucle1:

    add $4, $4, $2  #repetir tantas veces $1
    sub $5, $5, $6  
    beqz bucle1
    j mostrar


#*********************#
#   11 - DIVISION     #
#*********************#

dividir:

    move $4, $0
    move $5, $1
    lest $0, $1, $2     # si el $1 es menor -> z=0, si z igual a cero salir
    beqz mostrar         

bucle2:

    add $4, $4, $6  # sumar 1 unidad  
    sub $5, $5, $2
    lest $0, $5, $2     #si es no es menor -> z=1 por lo que repetir
    bnez bucle2


#**************************#
#   MOSTRAR POR PANTALLA   #
#**************************#

# 5 PARTES: OP1 | OPER | OP2 | = | RES
# EJEMPLO:  5   +   3   =   8
# Se comprueba el nº de cifras de cada numero y se llama a PRINT

mostrarOP1_1:
    
    li $5, 9
    move $7, $0
    move $8, $1
    lest $0, $5, $8
    beqz mostrarOP1_2

    move $10, $1    # Op1
    jal print  

    j mostrarOper

mostrarOP1_2: 

    add $7, $7, $6  # Incrementar
    sub $8, $8, $9  # Restar 10
    lest $0, $5, $8 # Repetir mientras sea mayor que 0-9
    beqz mostrarOP1_2

    move $10, $7
    jal print

    move $10, $8
    jal print 


mostrarOper:
    
    add $3, $3, $9  # Operacion
    nop
    move $10, $3     
    nop
    jal print


mostrarOP2_1:    

    li $5, 9
    move $7, $0
    move $8, $2
    lest $0, $5, $8
    beqz mostrarOP2_2
    
    move $10, $2    # Op2
    jal print

    j mostrarIgual

mostrarOP2_2:

    add $7, $7, $6  # Incrementar
    sub $8, $8, $9  # Restar 10
    lest $0, $5, $8 # Repetir mientras sea mayor que 0-9
    beqz mostrarOP2_2

    move $10, $7
    jal print

    move $10, $8
    jal print 


mostrarIgual:    

    move $10, $12   # =
    jal print


mostrarRES_1:    
    
    li $5, 9
    move $7, $0
    move $8, $4
    lest $0, $5, $8
    beqz mostrarRES_2

    move $10, $4    # Resultado
    jal print   

    j salir

mostrarRES_2:  

    add $7, $7, $6  # Incrementar
    sub $8, $8, $9  # Restar 10
    lest $0, $5, $8 # Repetir mientras sea mayor que 0-9
    beqz mostrarRES_2

    move $10, $7
    jal print

    move $10, $8
    jal print 

    j salir  


#************************#
#   PINTAR EN PANTALLA   #
#************************#

# Se extrae de memoria el numero en 2 tandas
# Se pinta en una matriz 5x3

print:

    li $7, 2     # Cargar un 2'b10 para Activar Pintar

    ######## EXTRAER CARACTER ##############
    add $14, $10, $10 # Direccion 1ª mitad del caracter
    add $15, $14, $6 # Direccion 2ª mitad del caracter

    sesr @3, $14
    lesr $14, @3    # 1ª mitad del caracter

    sesr @3, $15
    lesr $15, @3    # Direccion 2ª mitad del caracter

    sesr @3, $11    # Posicion en EJE X de pantalla: 0,1,2,3,4,5..

    ############ 1ª Mitad ##################
    #0 (0,0)
    #srl $14, $14, $6   # Sacar ultimo bit y comprobar valor
    and $13, $14, $6
    or $13, $13, $7     # 2'b10 -> pintar y 1'b0/1 -> negro/cyan
    sesm @0, 0
    sesm @1, 0
    sesr @2, $13    # Activar Pintar
    sesm @2, 0      # Desactivar Pintar

    #1 (0,1)
    srl $14, $14, $6
    and $13, $14, $6 
    or $13, $13, $7 
    sesm @0, 1
    sesm @1, 0
    sesr @2, $13
    sesm @2, 0

    #2 (0,2)
    srl $14, $14, $6
    and $13, $14, $6
    or $13, $13, $7    
    sesm @0, 2
    sesm @1, 0
    sesr @2, $13
    sesm @2, 0

    #3 (1,0)
    srl $14, $14, $6
    and $13, $14, $6    
    or $13, $13, $7
    sesm @0, 0
    sesm @1, 1
    sesr @2, $13
    sesm @2, 0

    #4 (1,1)
    srl $14, $14, $6
    and $13, $14, $6
    or $13, $13, $7    
    sesm @0, 1
    sesm @1, 1
    sesr @2, $13
    sesm @2, 0

    #5 (1,2)
    srl $14, $14, $6
    and $13, $14, $6
    or $13, $13, $7    
    sesm @0, 2
    sesm @1, 1
    sesr @2, $13
    sesm @2, 0

    #6 (2,0)
    srl $14, $14, $6
    and $13, $14, $6   
    or $13, $13, $7 
    sesm @0, 0
    sesm @1, 2
    sesr @2, $13
    sesm @2, 0    

    ############ 2ª Mitad ##################
    #7 (2,1)
    #srl $15, $15, $6   # Mismo proceso con 2ª mitad del caracter
    and $13, $15, $6  
    or $13, $13, $7
    sesm @0, 1
    sesm @1, 2
    sesr @2, $13
    sesm @2, 0

    #8 (2,2)
    srl $15, $15, $6
    and $13, $15, $6
    or $13, $13, $7  
    sesm @0, 2
    sesm @1, 2
    sesr @2, $13
    sesm @2, 0

    #9 (3,0)
    srl $15, $15, $6
    and $13, $15, $6  
    or $13, $13, $7
    sesm @0, 0
    sesm @1, 3
    sesr @2, $13
    sesm @2, 0

    #10 (3,1)
    srl $15, $15, $6
    and $13, $15, $6  
    or $13, $13, $7
    sesm @0, 1
    sesm @1, 3
    sesr @2, $13
    sesm @2, 0

    #11 (3,2)
    srl $15, $15, $6
    and $13, $15, $6
    or $13, $13, $7  
    sesm @0, 2
    sesm @1, 3
    sesr @2, $13
    sesm @2, 0

    #12 (4,0)
    srl $15, $15, $6
    and $13, $15, $6  
    or $13, $13, $7
    sesm @0, 0
    sesm @1, 4
    sesr @2, $13
    sesm @2, 0  

    #13 (4,1)
    srl $15, $15, $6
    and $13, $15, $6
    or $13, $13, $7  
    sesm @0, 1
    sesm @1, 4
    sesr @2, $13
    sesm @2, 0

    #14 (4,2)
    srl $15, $15, $6
    and $13, $15, $6   
    or $13, $13, $7 
    sesm @0, 2
    sesm @1, 4
    sesr @2, $13
    sesm @2, 0    
    ########################################  

    add $11, $11, $6    # Incrementar contador de posicion
    jr  # Volver al flujo de ejecucion    



#***************#
#   FINALIZAR   #
#***************#

salir:

    nop